extends Node


# Error difference we use. Angle calculation errors are pretty abismal in Godot
const EPSILON = 1e-4

# Generated by chat-GPT
# Utility script for generating UUIDs
static func generate_uuid() -> String:
	var rng = RandomNumberGenerator.new()
	rng.randomize()
	var bytes = []
	for i in range(16):
		bytes.append(rng.randi_range(0, 255))

	# Set the version to 4 (0100)
	bytes[6] = (bytes[6] & 0x0F) | 0x40
	# Set the variant to RFC 4122 (10xx)
	bytes[8] = (bytes[8] & 0x3F) | 0x80

	var hex = ""
	for byte in bytes:
		hex += String("%02x" % [byte])

	return hex.substr(0, 8) + "-" + hex.substr(8, 4) + "-" + hex.substr(12, 4) + "-" + hex.substr(16, 4) + "-" + hex.substr(20, 12)


func normalize_angle_0_to_2_pi(angle: float) -> float:
	# Use fmod to wrap the angle, then ensure it's positive
	var normalized = fmod(angle, 2 * PI)
	if normalized < 0:
		normalized += 2 * PI
	return normalized

# Check if angle matches a within EPSILON.
func check_angle_matches(angle_a: float, angle_b: float) -> bool:
	if abs(angle_difference(angle_a, angle_b)) <= EPSILON:
		return true
	return false


func check_value_epsilon(value: float) -> bool:
	if abs(value) <= EPSILON:
		return true
	elif abs(value - PI) <= EPSILON:
		return false
	assert(false, "Value %f is neither close to 0 nor PI" % value)
	return false
